version: '3'
services:
  webserver:
    image: nginx:alpine
    container_name: webserver
    tty: true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - crime-network
    depends_on:
      - crimes-api

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    expose:
      - 2181
    networks:
      - crime-network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    expose:
      - 9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - crime-network

  crimes-api:
    build: ./crimes-api
    image: crimes-api
    container_name: crimes-api
    expose:
      - 5001
    volumes:
      - ./crimes-api/crimes_api:/code/crimes_api
    environment:
      - SERVICE_TAGS=dev
      - SERVICE_NAME=crime-producer
      - UVICORN_PORT=5001
      - UVICORN_HOST=0.0.0.0
      - UVICORN_ROOT_PATH=/api/v1/
    depends_on:
      - kafka
      - connect
      - mongo-db
    networks:
      - crime-network

  # kafka-connect:
  #   image: confluentinc/cp-kafka-connect:5.1.0
  #   hostname: kafka-connect
  #   container_name: kafka-connect
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
  #     CONNECT_REST_ADVERTISED_HOST_NAME: connect
  #     CONNECT_REST_PORT: 8083
  #     CONNECT_GROUP_ID: compose-connect-group
  #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
  #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
  #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
  #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
  #     CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars'
  #     CONNECT_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
  #   volumes:
  #     - /tmp/custom/jars:/etc/kafka-connect/jars
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   networks:
  #     - crime-network

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:5.3.0
  #   hostname: schema-registry
  #   container_name: schema-registry
  #   depends_on:
  #     - zookeeper
  #     - broker
  #   ports:
  #     - "8081:8081"
  #   networks:
  #     - crime-network
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'

  # connect:
  #   image: confluentinc/kafka-connect-datagen:latest # Dockerfile loads cp-kafka-connect:5.3.0
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   hostname: connect
  #   container_name: connect
  #   depends_on:
  #     - zookeeper
  #     - broker
  #     - schema-registry
  #   ports:
  #     - "8083:8083"
  #   expose:
  #     "8083"
  #   networks:
  #     - crime-network
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
  #     CONNECT_REST_ADVERTISED_HOST_NAME: connect
  #     CONNECT_REST_PORT: 8083
  #     CONNECT_GROUP_ID: compose-connect-group
  #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
  #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
  #     CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
  #     CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
  #     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
  #     CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
  #     CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR,com.mongodb.kafka=DEBUG"
  #     CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components
  #     CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     # Assumes image is based on confluentinc/kafka-connect-datagen:latest which is pulling 5.3.0 Connect image
  #     CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.3.0.jar
  #     CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
  #     CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
  #   command: "bash -c 'if [ ! -d /usr/share/confluent-hub-components/confluentinc-kafka-connect-datagen ]; then echo \"WARNING: Did not find directory for kafka-connect-datagen (did you remember to run: docker-compose up -d --build ?)\"; fi ; /etc/confluent/docker/run'"
  #   volumes:
  #     - ../build/confluent/kafka-connect-mongodb:/usr/share/confluent-hub-components/kafka-connect-mongodb

  connect:
    image: confluentinc/cp-kafka-connect-base:latest
    build:
      context: .
      dockerfile: Dockerfile-MongoConnect
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8083:8083"
    expose:
      - 8083
    networks:
      - crime-network
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect-cluster-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_CONNECTIONS_MAX_IDLE_MS: 180000
      CONNECT_METADATA_MAX_AGE_MS: 180000
      CONNECT_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"

  mongo-db:
    image: mongo:4.0.5
    hostname: mongo-db
    container_name: mongo-db
    expose:
      - 27017
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-db:/data
    networks:
      - crime-network

  # mongo-express:
  #   image: mongo-express
  #   container_name: mongo-express
  #   ports:
  #       - 8081:8081
  #   volumes:
  #       - ./data:/data/db
  #   # env_file:
  #   #     - .env
  #   environment:
  #       ME_CONFIG_MONGODB_SERVER: mongodb
  #       # ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
  #       # ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
  #       # ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
  #       # ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
  #   depends_on:
  #       - mongo-db
  #   networks:
  #     - crime-network

  # mongoclient:
  #   image: mongoclient/mongoclient:2.2.0
  #   container_name: mongoclient
  #   hostname: mongoclient
  #   depends_on:
  #     - mongo-db
  #   ports:
  #     - 3000:3000
  #   environment:
  #     MONGO_URL: "mongodb://mongo-db:27017"
  #     PORT: 3000
  #   expose:
  #     - "3000"

networks:
  crime-network:
    driver: bridge
